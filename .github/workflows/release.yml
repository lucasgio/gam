name: Release

on:
  push:
    tags:
      - 'v*.*.*'

env:
  CARGO_TERM_COLOR: always

permissions:
  contents: write

jobs:
  build-release:
    name: Build release artifacts (${{ matrix.os }} / ${{ matrix.target }})
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            ext: ''
            use_cross: false
          - os: ubuntu-latest
            target: aarch64-unknown-linux-gnu
            ext: ''
            use_cross: true
          - os: macos-latest
            target: x86_64-apple-darwin
            ext: ''
            use_cross: false
          - os: macos-latest
            target: aarch64-apple-darwin
            ext: ''
            use_cross: false
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            ext: '.exe'
            use_cross: false

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install Rust (stable) attempt 1
        id: install_rust_1
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}
        continue-on-error: true

      - name: Install Rust (stable) attempt 2
        if: steps.install_rust_1.outcome != 'success'
        id: install_rust_2
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}
        continue-on-error: true

      - name: Install Rust (stable) attempt 3
        if: steps.install_rust_2.outcome != 'success'
        id: install_rust_3
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}
        continue-on-error: true

      - name: Verify Rust toolchain
        run: rustc -V && cargo -V

      - name: Cache cargo
        uses: Swatinem/rust-cache@v2

      - name: Install cross (Linux cross targets)
        if: ${{ matrix.use_cross }}
        run: |
          for i in 1 2 3; do
            echo "Attempt $i: install cross"
            if cargo install cross --git https://github.com/cross-rs/cross; then
              break
            fi
            echo "Retrying in 15s..." && sleep 15
          done

      - name: Build (release)
        shell: bash
        run: |
          set -e
          for i in 1 2 3; do
            echo "Attempt $i: build"
            if [ "${{ matrix.use_cross }}" = "true" ]; then
              cross build --release --locked --target ${{ matrix.target }} && break
            else
              cargo build --release --locked --target ${{ matrix.target }} && break
            fi
            echo "Retrying in 15s..." && sleep 15
          done

      - name: Prepare package
        shell: bash
        run: |
          set -euxo pipefail
          BIN_NAME="gam"
          TARGET_DIR="target/${{ matrix.target }}/release"
          OUT_DIR="dist"
          mkdir -p "$OUT_DIR"
          BIN_PATH="$TARGET_DIR/$BIN_NAME${{ matrix.ext }}"

          # Create archive name
          VERSION="${GITHUB_REF#refs/tags/}"
          PKG_BASENAME="${BIN_NAME}-${VERSION}-${{ matrix.target }}"

          # Copy binary and license/readme
          mkdir -p "$PKG_BASENAME"
          cp "$BIN_PATH" "$PKG_BASENAME/"
          if [ -f LICENSE ]; then cp LICENSE "$PKG_BASENAME/"; fi
          if [ -f README.md ]; then cp README.md "$PKG_BASENAME/"; fi

          # Archive (zip for Windows, tar.gz otherwise)
          if [[ "${{ matrix.os }}" == windows-latest ]]; then
            7z a "$OUT_DIR/$PKG_BASENAME.zip" "$PKG_BASENAME" > /dev/null
            cp "$OUT_DIR/$PKG_BASENAME.zip" "$OUT_DIR/${BIN_NAME}-${{ matrix.target }}.zip"
          else
            tar -czf "$OUT_DIR/$PKG_BASENAME.tar.gz" "$PKG_BASENAME"
            cp "$OUT_DIR/$PKG_BASENAME.tar.gz" "$OUT_DIR/${BIN_NAME}-${{ matrix.target }}.tar.gz"
          fi

          # Do not create checksums here to avoid duplicate names across matrices

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: gam-${{ matrix.target }}
          path: dist/*

  publish:
    name: Publish Release
    needs: build-release
    runs-on: ubuntu-latest
    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          path: dist

      - name: Generate consolidated checksums
        shell: bash
        run: |
          set -euxo pipefail
          cd dist
          find . -type f \( -name 'gam-*.tar.gz' -o -name 'gam-*.zip' \) -print0 | xargs -0 shasum -a 256 > gam-SHA256SUMS.txt || true

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          files: |
            dist/**
          prerelease: ${{ contains(github.ref_name, '-alpha') || contains(github.ref_name, '-beta') || contains(github.ref_name, '-rc') }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}


